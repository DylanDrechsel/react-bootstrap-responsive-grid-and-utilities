{"version":3,"file":"index.js","sources":["../src/components/Col.tsx","../src/components/Container.tsx","../src/components/Row.tsx"],"sourcesContent":["/**\n * COLUMN COMPONENT (This is where the meat and potatoes happen!)\n * \n * The Col component represents individual columns within a row.\n * It supports responsive breakpoints and can specify different column widths at different screen sizes\n * My Grid System is based on 12 columns, so values 1-12 represent portions of the full Row\n * \n * Breakpoint Props\n * - number (1-12): Specifies how many column this element should span\n * - 'auto': Column takes up only as much space as its content requires\n * - undefined: No specific width constraint for this breakpoint\n * \n * Offset Props\n * - number (0-11): Adds left margin to push the column to the right\n * \n * Breakpoint Sizes\n * - xxs: Extra small devices (phones, <576px)\n * - xs: Small devices (landscape phones, ≥576px)\n * - sm: Medium devices (tablets, ≥768px)\n * - md: Small desktop (small desktops, ≥992px)\n * - lg: Large desktop (medium desktops, ≥1200px)\n * - xl: Extra large desktop (large desktops, ≥1400px)\n * - xxl: Extra extra large desktop (larger desktops, ≥1600px)\n */\n\nimport { type FC } from \"react\";\n\ninterface ColProps {\n    children: React.ReactNode;\n    className?: string;\n\n    // Responsive column width props\n    xxs?: number | 'auto';\n    xs?: number | 'auto';\n    sm?: number | 'auto'; \n    md?: number | 'auto';\n    lg?: number | 'auto';\n    xl?: number | 'auto';\n    xxl?: number | 'auto';\n\n    // Offset props - add left margin to push column to the right\n    offsetXxs?: number;\n    offsetXs?: number;\n    offsetSm?: number;\n    offsetMd?: number;\n    offsetLg?: number;\n    offsetXl?: number;\n    offsetXxl?: number;\n};\n\nexport const Col: FC<ColProps> = ({\n    children, \n    className = '',\n    xxs,\n    xs,\n    sm,\n    md,\n    lg,\n    xl,\n    xxl,\n    offsetXxs,\n    offsetXs,\n    offsetSm,\n    offsetMd,\n    offsetLg,\n    offsetXl,\n    offsetXxl\n}) => {\n/**\n * buildClasses - Constructs the CSS class string for the columns\n * \n * This function dynamically builds the appropriate CSS classes based on the props passed.\n * It handles both column sizing and offset classes for all responsive breakpoints.\n * \n * Class Naming Conventions:\n * - Column sizes: 'col-{breakpoint}-{size}' (e.g., 'col-md-6')\n * - Auto columns: 'col-{breakpoint}-auto' (e.g., 'col-lg-auto')\n * - Offsets: 'offset-{breakpoint}-{amount}' (e.g., 'offset-md-2')\n */\n\n    const buildClasses = () => {\n        const classes = ['col'];\n\n        // Adds responsive column size classes for each breakpoint\n        // check if size is defined, then check if its auto-width or specific column count\n        if (xxs !== undefined) classes.push(xxs === 'auto' ? 'col-xxs-auto' : `col-xxs-${xxs}`);\n        if (xs !== undefined) classes.push(xs === 'auto' ? 'col-xs-auto' : `col-xs-${xs}`);\n        if (sm !== undefined) classes.push(sm === 'auto' ? 'col-sm-auto' : `col-sm-${sm}`);\n        if (md !== undefined) classes.push(md === 'auto' ? 'col-md-auto' : `col-md-${md}`);\n        if (lg !== undefined) classes.push(lg === 'auto' ? 'col-lg-auto' : `col-lg-${lg}`);\n        if (xl !== undefined) classes.push(xl === 'auto' ? 'col-xl-auto' : `col-xl-${xl}`);\n        if (xxl !== undefined) classes.push(xxl === 'auto' ? 'col-xxl-auto' : `col-xxl-${xxl}`);\n\n        // Add offset classes for each breakpoint where offset is specified\n        // Offsets create left margin to push the column away from the left edge\n        if (offsetXxs !== undefined) classes.push(`offset-xxs-${offsetXxs}`);\n        if (offsetXs !== undefined) classes.push(`offset-xs-${offsetXs}`);\n        if (offsetSm !== undefined) classes.push(`offset-sm-${offsetSm}`);\n        if (offsetMd !== undefined) classes.push(`offset-md-${offsetMd}`);\n        if (offsetLg !== undefined) classes.push(`offset-lg-${offsetLg}`);\n        if (offsetXl !== undefined) classes.push(`offset-xl-${offsetXl}`);\n        if (offsetXxl !== undefined) classes.push(`offset-xxl-${offsetXxl}`);\n\n        return classes.join(' ');\n    };\n\n    return (\n        <div className={`${buildClasses()} ${className}`}>\n            {children}\n        </div>\n    );\n};","/**\n * CONTAINER COMPONENT\n * \n * The Container component provides the foundational wrapper for the grid system.\n * It centers content horizontally and applies responsive max-widths at different breakpoints.\n * \n * Props:\n * - fluid: When true, creates a full-width container that spans the entire viewport\n * - children: React nodes to be rendered inside the container\n * - className: Additional CSS classes to apply to the container \n */\n\nimport { type FC } from \"react\";\n\ninterface ContainerProps {\n    fluid?: boolean;\n    children: React.ReactNode; // Accepts anything that React is capable of rendering as its children (HTML Elements, Strings, Numbers, etc...)\n    className?: string;\n};\n\nexport const Container: FC<ContainerProps> = ({\n    fluid = false,\n    children,\n    className = ''\n}) => {\n    // Choose between fixed-width container (with responsive max-widths) or fluid container (full-width)\n    const containerClass = fluid ? 'container-fluid' : 'container';\n\n    return (\n        <div className={`${containerClass} ${className}`}>\n            {children}\n        </div>\n    );\n};","/**\n * ROW COMPONENT\n * \n * The Row component creates a horizontal group of columns using flexbox.\n * It handles the negative margins that offset the column padding to maintain proper alignment\n * \n * Props:\n * - children: Column components or other React nodes\n * - className: Additional CSS classes for custom styling\n * - noGutters: When true, removes the spacing between columns\n */\n\nimport { type FC } from \"react\";\n\ninterface RowProps {\n    children: React.ReactNode;\n    className?: string;\n    noGutters?: boolean;\n};\n\nexport const Row: FC<RowProps> = ({\n    children,\n    className = '',\n    noGutters = false\n}) => {\n    // Apply no-gutters class to remove spacing between columns if requested\n    const rowClass = noGutters ? 'row no-gutters' : 'row';\n\n    return (\n        <div className={`${rowClass} ${className}`}>\n            {children}\n        </div>\n    );\n};"],"names":["children","className","xxs","xs","sm","md","lg","xl","xxl","offsetXxs","offsetXs","offsetSm","offsetMd","offsetLg","offsetXl","offsetXxl","_jsx","classes","undefined","push","join","buildClasses","fluid","containerClass","noGutters","rowClass"],"mappings":"4DAkDiC,EAC7BA,WACAC,YAAY,GACZC,MACAC,KACAC,KACAC,KACAC,KACAC,KACAC,MACAC,YACAC,WACAC,WACAC,WACAC,WACAC,WACAC,eAyCIC,MAAA,MAAA,CAAKf,UAAW,GA3BC,MACjB,MAAMgB,EAAU,CAAC,OAsBjB,YAlBYC,IAARhB,GAAmBe,EAAQE,KAAa,SAARjB,EAAiB,eAAiB,WAAWA,UACtEgB,IAAPf,GAAkBc,EAAQE,KAAY,SAAPhB,EAAgB,cAAgB,UAAUA,UAClEe,IAAPd,GAAkBa,EAAQE,KAAY,SAAPf,EAAgB,cAAgB,UAAUA,UAClEc,IAAPb,GAAkBY,EAAQE,KAAY,SAAPd,EAAgB,cAAgB,UAAUA,UAClEa,IAAPZ,GAAkBW,EAAQE,KAAY,SAAPb,EAAgB,cAAgB,UAAUA,UAClEY,IAAPX,GAAkBU,EAAQE,KAAY,SAAPZ,EAAgB,cAAgB,UAAUA,UACjEW,IAARV,GAAmBS,EAAQE,KAAa,SAARX,EAAiB,eAAiB,WAAWA,UAI/DU,IAAdT,GAAyBQ,EAAQE,KAAK,cAAcV,UACvCS,IAAbR,GAAwBO,EAAQE,KAAK,aAAaT,UACrCQ,IAAbP,GAAwBM,EAAQE,KAAK,aAAaR,UACrCO,IAAbN,GAAwBK,EAAQE,KAAK,aAAaP,UACrCM,IAAbL,GAAwBI,EAAQE,KAAK,aAAaN,UACrCK,IAAbJ,GAAwBG,EAAQE,KAAK,aAAaL,UACpCI,IAAdH,GAAyBE,EAAQE,KAAK,cAAcJ,KAEjDE,EAAQG,KAAK,MAIDC,MAAkBpB,IAAWD,SAC3CA,sBCxFgC,EACzCsB,SAAQ,EACRtB,WACAC,YAAY,OAGZ,MAAMsB,EAAiBD,EAAQ,kBAAoB,YAEnD,OACIN,MAAA,MAAA,CAAKf,UAAW,GAAGsB,KAAkBtB,IAAWD,SAC3CA,iBCVoB,EAC7BA,WACAC,YAAY,GACZuB,aAAY,MAGZ,MAAMC,EAAWD,EAAY,iBAAmB,MAEhD,OACIR,MAAA,MAAA,CAAKf,UAAW,GAAGwB,KAAYxB,IAAWD,SACrCA"}